// primary index API
func(a *{{.TblName.LCamel}}API) WithPrimaryIndex({{.PK.AttrName.LCamel}} {{.PK.Type.GoType}}, {{.SK.AttrName.LCamel}} {{.SK.Type.GoType}}) *withPrimIdx {
	return &withPrimIdx{
		table: a.table,
		pkName: {{.PK.AttrName.Quoted}},
		pkVal: {{.PK.AttrName.LCamel}},
		skName: {{.SK.AttrName.Quoted}},
		skVal: {{.SK.AttrName.LCamel}},
	}
}

func (a *{{.TblName.LCamel}}API) QueryWithPrimaryIndex({{.PK.AttrName.LCamel}} {{.PK.Type.GoType}}) *queryWithPrimIdx {
	return &queryWithPrimIdx{
		table: a.table,
		pkName: {{.PK.AttrName.Quoted}},
		pkVal: {{.PK.AttrName.LCamel}},
		skName: {{.SK.AttrName.Quoted}},
	}
}

type {{.TblName.UCamel}}PrimIndex struct {
	{{.PK.AttrName.UCamel}} {{.PK.Type.GoType}}
	{{.SK.AttrName.UCamel}} {{.SK.Type.GoType}}
}

func (a *{{.TblName.LCamel}}API) BatchWithPrimaryIndex(keys []{{.TblName.UCamel}}PrimIndex) *batchWithPrimIdx {
  dedup := make(map[{{.TblName.UCamel}}PrimIndex]struct{})
  for _, k := range keys {
    dedup[k] = struct{}{}
  }

	ks := make([]dynamo.Keyed, 0, len(dedup))
	for k := range dedup {
		ks = append(ks, dynamo.Keys{ k.{{.PK.AttrName.UCamel}}, k.{{.SK.AttrName.UCamel}} })
	}

	return &batchWithPrimIdx {
		table: a.table,
		pkName: {{.PK.AttrName.Quoted}},
		skName: {{.SK.AttrName.Quoted}},
		keys: ks,
	}
}
